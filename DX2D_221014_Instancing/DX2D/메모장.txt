4x4 행렬에 4x1(x,y,z,1)행렬을 곱해서 동차변환 시키는 과정

https://bbungprogram.tistory.com/25
World->View->Projection->NDC (동차변환)


SRT에서는 Local위치와 Global위치가 따로 있다!


* Texture 출력 방법
--> UVMapping을 이용
- UV : 가로, 세로를 의미함
- Mapping : 색종이를 오려서 붙이는 방식

UV를 출력하려면 Texture 정보를 받고 SamplerState를 받음
- SamplerState: 필터링, 

-----------------------------------

쉐이더가 중복해서 선언되는 문제가 있어서 Shader 하나를 상속받아서
업캐스팅을 이용한 중복 선언 방지 코드를 작성하였음!

-------------------------------------

* AABB (Axis Aligned Bounding Box)
객체를 사각형으로 감싸서 회전하지 않고 그대로 충돌처리 하는 것
ex) 마름모 모양이어도 각 꼭짓점을 포함하는 사각형 모양으로 Rect 충돌
장점: 겹치는 부분도 회전이 없으니 사각형으로 일정하게 나온다!

* OBB (Object Bounding Box)
오브젝트 그대로 충돌처리를 하겠다!
회전된 마름모 모양의 사각형이 있으면 회전된 그대로 충돌처리를 하는 것
회전된 객체들이 있다면 AABB 충돌처리는 매우 부정확하다.

- OBB를 이해하려면 '분리축 이론'을 이해해야함
분리축 이론: 볼록 다각형에 한해서 적용된다. (오목 다각형X)

------------------------------------

* 내적(Dot)
AㆍB = |A| * |B| * cos0
(AxAy)(BxBy) = Ax * Bx + Ay * By

* 외적(Cross)
|Ax Ay Az|
|Bx By Bz|

x = Ay*Bz - Az*By; (이때 2D는 z가 0이므로 x = 0)
y = Ax*Bz - Az*Bx; (동일하게 y=0)

즉, 2D에서 외적하면 수직되는 직선만 나온다??
z = Ax*By - Ay*Bx;

---------------------------------------

* 다익스트라 알고리즘

1. 시작지점 초기화
2. cost가 낮은 노드 선택
3. 머더라

단점: 효율이 낮다. 지역(노드)가 많아지면 최단 경로를 찾는데 오래걸린다.

---------------------------------------

* A Star 알고리즘

1. 시작노드 초기화
   via, cost(f,g,h)초기화 후 시작노드를 Open Node로 설정

2. 오픈노드 중 효율이 가장 좋은 곳을 선택

3. 선택 노드에서 이동 가능한 노드들을 확장 후, Open Node를 Close Node로 설정

위의 과정을 반복

- A Star 알고리즘을 최적화할 땐 Heap(이진 트리)를 활용하여 최소, 최댓값을 찾을 때 이용한다.